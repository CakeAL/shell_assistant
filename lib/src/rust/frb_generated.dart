// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/command.dart';
import 'api/entity.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiCommandInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.6.0';

  @override
  int get rustContentHash => -179764186;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_shell_assistant',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<BatteryInfo> crateApiEntityBatteryInfoDefault();

  String crateApiCommandExecuteBypassSignature(
      {required String path, required String password});

  void crateApiCommandExecuteResetDockSettings();

  void crateApiCommandExecuteResetScreenshotSettings();

  void crateApiCommandExecuteWriteDockSettings(
      {required List<bool> switchStates,
      double? animationTime,
      double? delayTime});

  void crateApiCommandExecuteWriteScreenshotSettings(
      {required Map<int, String> commandMap});

  BigInt crateApiCommandGetFolderSize({required String path});

  String crateApiCommandGetIconAndConvert({required String path});

  SystemInfo crateApiCommandGetSystemInfo();

  String? crateApiCommandGetUserName();

  Future<void> crateApiCommandInitApp();

  void crateApiCommandOpenFolder({required String path});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<BatteryInfo> crateApiEntityBatteryInfoDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_battery_info,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEntityBatteryInfoDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEntityBatteryInfoDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "battery_info_default",
        argNames: [],
      );

  @override
  String crateApiCommandExecuteBypassSignature(
      {required String path, required String password}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        sse_encode_String(password, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommandExecuteBypassSignatureConstMeta,
      argValues: [path, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommandExecuteBypassSignatureConstMeta =>
      const TaskConstMeta(
        debugName: "execute_bypass_signature",
        argNames: ["path", "password"],
      );

  @override
  void crateApiCommandExecuteResetDockSettings() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommandExecuteResetDockSettingsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommandExecuteResetDockSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "execute_reset_dock_settings",
        argNames: [],
      );

  @override
  void crateApiCommandExecuteResetScreenshotSettings() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommandExecuteResetScreenshotSettingsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommandExecuteResetScreenshotSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "execute_reset_screenshot_settings",
        argNames: [],
      );

  @override
  void crateApiCommandExecuteWriteDockSettings(
      {required List<bool> switchStates,
      double? animationTime,
      double? delayTime}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_bool(switchStates, serializer);
        sse_encode_opt_box_autoadd_f_64(animationTime, serializer);
        sse_encode_opt_box_autoadd_f_64(delayTime, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommandExecuteWriteDockSettingsConstMeta,
      argValues: [switchStates, animationTime, delayTime],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommandExecuteWriteDockSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "execute_write_dock_settings",
        argNames: ["switchStates", "animationTime", "delayTime"],
      );

  @override
  void crateApiCommandExecuteWriteScreenshotSettings(
      {required Map<int, String> commandMap}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_String(commandMap, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommandExecuteWriteScreenshotSettingsConstMeta,
      argValues: [commandMap],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommandExecuteWriteScreenshotSettingsConstMeta =>
      const TaskConstMeta(
        debugName: "execute_write_screenshot_settings",
        argNames: ["commandMap"],
      );

  @override
  BigInt crateApiCommandGetFolderSize({required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommandGetFolderSizeConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommandGetFolderSizeConstMeta =>
      const TaskConstMeta(
        debugName: "get_folder_size",
        argNames: ["path"],
      );

  @override
  String crateApiCommandGetIconAndConvert({required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiCommandGetIconAndConvertConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommandGetIconAndConvertConstMeta =>
      const TaskConstMeta(
        debugName: "get_icon_and_convert",
        argNames: ["path"],
      );

  @override
  SystemInfo crateApiCommandGetSystemInfo() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_system_info,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommandGetSystemInfoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommandGetSystemInfoConstMeta =>
      const TaskConstMeta(
        debugName: "get_system_info",
        argNames: [],
      );

  @override
  String? crateApiCommandGetUserName() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommandGetUserNameConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommandGetUserNameConstMeta => const TaskConstMeta(
        debugName: "get_user_name",
        argNames: [],
      );

  @override
  Future<void> crateApiCommandInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommandInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommandInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  void crateApiCommandOpenFolder({required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCommandOpenFolderConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCommandOpenFolderConstMeta => const TaskConstMeta(
        debugName: "open_folder",
        argNames: ["path"],
      );

  @protected
  Map<int, String> dco_decode_Map_i_32_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_32_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BatteryInfo dco_decode_battery_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BatteryInfo(
      currentCapacity: dco_decode_u_8(arr[0]),
      appleRawCurrentCapacity: dco_decode_i_32(arr[1]),
      designCapacity: dco_decode_i_32(arr[2]),
      appleRawMaxCapacity: dco_decode_i_32(arr[3]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  DiskInfo dco_decode_disk_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return DiskInfo(
      name: dco_decode_String(arr[0]),
      fileSystem: dco_decode_String(arr[1]),
      diskType: dco_decode_String(arr[2]),
      mountPoint: dco_decode_String(arr[3]),
      removable: dco_decode_bool(arr[4]),
      totalSpace: dco_decode_u_64(arr[5]),
      availableSpace: dco_decode_u_64(arr[6]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<bool> dco_decode_list_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bool).toList();
  }

  @protected
  List<DiskInfo> dco_decode_list_disk_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_disk_info).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(int, String)> dco_decode_list_record_i_32_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_string).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  (int, String) dco_decode_record_i_32_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  SystemInfo dco_decode_system_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return SystemInfo(
      hostName: dco_decode_opt_String(arr[0]),
      userName: dco_decode_opt_String(arr[1]),
      cpuModel: dco_decode_String(arr[2]),
      numberOfCpus: dco_decode_i_32(arr[3]),
      systemName: dco_decode_opt_String(arr[4]),
      kernelVersion: dco_decode_opt_String(arr[5]),
      osVersion: dco_decode_opt_String(arr[6]),
      totalMemory: dco_decode_u_64(arr[7]),
      totalSwap: dco_decode_u_64(arr[8]),
      sipStatus: dco_decode_opt_String(arr[9]),
      timeSinceBoot: dco_decode_opt_String(arr[10]),
      diskInfos: dco_decode_list_disk_info(arr[11]),
      batteryInfo: dco_decode_battery_info(arr[12]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  Map<int, String> sse_decode_Map_i_32_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BatteryInfo sse_decode_battery_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_currentCapacity = sse_decode_u_8(deserializer);
    var var_appleRawCurrentCapacity = sse_decode_i_32(deserializer);
    var var_designCapacity = sse_decode_i_32(deserializer);
    var var_appleRawMaxCapacity = sse_decode_i_32(deserializer);
    return BatteryInfo(
        currentCapacity: var_currentCapacity,
        appleRawCurrentCapacity: var_appleRawCurrentCapacity,
        designCapacity: var_designCapacity,
        appleRawMaxCapacity: var_appleRawMaxCapacity);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  DiskInfo sse_decode_disk_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_fileSystem = sse_decode_String(deserializer);
    var var_diskType = sse_decode_String(deserializer);
    var var_mountPoint = sse_decode_String(deserializer);
    var var_removable = sse_decode_bool(deserializer);
    var var_totalSpace = sse_decode_u_64(deserializer);
    var var_availableSpace = sse_decode_u_64(deserializer);
    return DiskInfo(
        name: var_name,
        fileSystem: var_fileSystem,
        diskType: var_diskType,
        mountPoint: var_mountPoint,
        removable: var_removable,
        totalSpace: var_totalSpace,
        availableSpace: var_availableSpace);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<bool> sse_decode_list_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <bool>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bool(deserializer));
    }
    return ans_;
  }

  @protected
  List<DiskInfo> sse_decode_list_disk_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DiskInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_disk_info(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(int, String)> sse_decode_list_record_i_32_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_string(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (int, String) sse_decode_record_i_32_string(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SystemInfo sse_decode_system_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hostName = sse_decode_opt_String(deserializer);
    var var_userName = sse_decode_opt_String(deserializer);
    var var_cpuModel = sse_decode_String(deserializer);
    var var_numberOfCpus = sse_decode_i_32(deserializer);
    var var_systemName = sse_decode_opt_String(deserializer);
    var var_kernelVersion = sse_decode_opt_String(deserializer);
    var var_osVersion = sse_decode_opt_String(deserializer);
    var var_totalMemory = sse_decode_u_64(deserializer);
    var var_totalSwap = sse_decode_u_64(deserializer);
    var var_sipStatus = sse_decode_opt_String(deserializer);
    var var_timeSinceBoot = sse_decode_opt_String(deserializer);
    var var_diskInfos = sse_decode_list_disk_info(deserializer);
    var var_batteryInfo = sse_decode_battery_info(deserializer);
    return SystemInfo(
        hostName: var_hostName,
        userName: var_userName,
        cpuModel: var_cpuModel,
        numberOfCpus: var_numberOfCpus,
        systemName: var_systemName,
        kernelVersion: var_kernelVersion,
        osVersion: var_osVersion,
        totalMemory: var_totalMemory,
        totalSwap: var_totalSwap,
        sipStatus: var_sipStatus,
        timeSinceBoot: var_timeSinceBoot,
        diskInfos: var_diskInfos,
        batteryInfo: var_batteryInfo);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_Map_i_32_String(
      Map<int, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_battery_info(BatteryInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.currentCapacity, serializer);
    sse_encode_i_32(self.appleRawCurrentCapacity, serializer);
    sse_encode_i_32(self.designCapacity, serializer);
    sse_encode_i_32(self.appleRawMaxCapacity, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_disk_info(DiskInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.fileSystem, serializer);
    sse_encode_String(self.diskType, serializer);
    sse_encode_String(self.mountPoint, serializer);
    sse_encode_bool(self.removable, serializer);
    sse_encode_u_64(self.totalSpace, serializer);
    sse_encode_u_64(self.availableSpace, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_bool(List<bool> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bool(item, serializer);
    }
  }

  @protected
  void sse_encode_list_disk_info(
      List<DiskInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_disk_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_i_32_string(
      List<(int, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_string(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_record_i_32_string(
      (int, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_system_info(SystemInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.hostName, serializer);
    sse_encode_opt_String(self.userName, serializer);
    sse_encode_String(self.cpuModel, serializer);
    sse_encode_i_32(self.numberOfCpus, serializer);
    sse_encode_opt_String(self.systemName, serializer);
    sse_encode_opt_String(self.kernelVersion, serializer);
    sse_encode_opt_String(self.osVersion, serializer);
    sse_encode_u_64(self.totalMemory, serializer);
    sse_encode_u_64(self.totalSwap, serializer);
    sse_encode_opt_String(self.sipStatus, serializer);
    sse_encode_opt_String(self.timeSinceBoot, serializer);
    sse_encode_list_disk_info(self.diskInfos, serializer);
    sse_encode_battery_info(self.batteryInfo, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
